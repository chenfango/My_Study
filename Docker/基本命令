
docker的架构：https://www.w3cschool.cn/docker/docker-architecture.html
docker的基本概念https://www.linuxprobe.com/docker-basic-control-1.html
一些相似命令的区别：https://www.imooc.com/article/31928

docker的基本命令：

查看docker 版本
$ docker version

查看docker详情
# docker info:查看系统(docker)层面信息，包括管理的images, containers数等

搜索容器
# docker search <镜像名>

查看容器列表
# docker ps <option>  
-h 帮助

查看镜像列表
docker iamges

拉取镜像
Usage:	docker pull [OPTIONS] NAME[:TAG|@DIGEST]
Pull an image or a repository from a registry
Options:
  -a, --all-tags                Download all tagged images in the repository
      --disable-content-trust   Skip image verification (default true)
      --help                    Print usage
      
使用镜像并创建容器
# docker run --help
Usage:	docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
Run a command in a new container
-P （大写） :是容器内部端口随机映射到主机的高端口
-p (小写)   ：是容器内部端口绑定到指定的主机端口
使用docker run之后如果使用docker ps 无法看到是否有在进行的容器，可以使用docker ps -a 查看所有曾经的docker
使用-it命令可以进入交互模式，但是退出交互模式之后，就会释放相应的容器

命令进入容器
docker exec 可以配合-it提供伪终端

保存, 恢复镜像信息
docker save/load

利用Dockerfile创建image

写好dockerfile文件；
运行 docker build -t <imageID:TagID> <Dockerfile文件所在路径>
运行好以后可以用docker images 查看是否存在

操作容器状态
docker start/stop/pause/unpause/kill/restart CONTAINER_ID

查看容器内部运行的进程
docker top 

查看指定 （ID或者名字）容器的某个确定端口映射到宿主机的端口号
docker port


docker tag :http://www.runoob.com/docker/docker-save-command.html


https://www.w3cschool.cn/use_docker/use_docker-cjka27zg.html


容器的创建三种模式
https://blog.csdn.net/zziahgf/article/details/72578147
1、利用制定DockerFile文件，https://yeasy.gitbooks.io/docker_practice/image/build.html
2、利用已有的image，进入后修改相关配置内容，形成新的image。命令：docker commit ,相关的网址：https://yeasy.gitbooks.io/docker_practice/image/commit.html
但是方法2的不利之处：会黑盒增加很多的其他文件，导致镜像的臃肿


容器Dockerfile解析
https://developer.huawei.com/ict/forum/thread-22039.html

外部访问容器：https://yeasy.gitbooks.io/docker_practice/network/port_mapping.html
最主要是使用-p/-P参数实现容器对外的映射

容器之间的互连
首先创建网络
docker network create -d bridge my-net
启动docker，并加入创建的网络
docker run -it --rm --name busybox1 --network my-net busybox sh
docker run -it --rm --name busybox2 --network my-net busybox sh

验证方式：在互相的交互页面进行ping 对方
# ping busybox2
PING busybox2 (172.17.0.3): 56 data bytes
64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.133 ms
64 bytes from 172.17.0.3: seq=1 ttl=64 time=0.111 ms

配置DNS：https://yeasy.gitbooks.io/docker_practice/network/dns.html

