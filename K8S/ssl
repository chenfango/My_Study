#! /bin/bash

GRN='\E[1;32m'
RED='\E[1;31m'
RES='\E[0m'
SCR=`cat ../env.yml | grep SCR | awk -F ':' '{print $2}' | sed 's/^[ \t]*//g'`



HOME_DIR=$SCR/create_ssl
SSL_DIR=$SCR/data/ssl

if [ ! -d $SSL_DIR ];then
	mkdir -p $SSL_DIR
fi

if [ -d $SSL_DIR ];then
	mkdir -p $SSL_DIR/{admssl,calicossl,etcdssl,k8sssl,kcmssl,kshssl,kubeproxyssl,metricsserverssl}
else
	echo -e " "
	echo -e "$GRN$SSL_DIR$RES is not exist, needs to be created"
	echo -e " "
	exit 1
fi

LIST=$SCR/env.yml


new_KUBE_APISERVER=`cat $LIST | grep new_KUBE_APISERVER | awk -F ' ' '{print $2}' | sed 's/^[ \t]*//g'`
export KUBE_APISERVER="$new_KUBE_APISERVER"


生成ca证书

# cat ca-config.json 
{
  "signing": {
    "default": {
      "expiry": "876000h"
    },
    "profiles": {
      "kubernetes": {
        "usages": [
            "signing",
            "key encipherment",
            "server auth",
            "client auth"
        ],
        "expiry": "87600h"
      }
    }
  }
}
   
# cat ca-csr.json
{
  "CN": "kubernetes",
  "key": {
	"algo": "rsa",
	"size": 2048
  },
  "names": [
	{
	  "C": "CN",
	  "ST": "ShangHai",
	  "L": "ShangHai",
	  "O": "k8s",
	  "OU": "System"
	}
  ]
}


{
    "CN": "kubernetes",
    "hosts": [
      "127.0.0.1",
      "172.23.18.139",
      "172.23.18.140",
      "172.23.18.141",
      "192.168.0.1",
      "kubernetes.default",
      "kubernetes.default.svc",
      "kubernetes.default.svc.cluster",
      "kubernetes.default.svc.cluster.local"
    ],
    "key": {
        "algo": "rsa",
        "size": 2048
    },
    "names": [
        {
            "C": "CN",
            "ST": "ShangHai",
            "L": "ShangHai",
            "O": "k8s",
            "OU": "System"
        }
    ]
}


## create CA for all ##
if [ ! -f $SSL_DIR/ca-key.pem ];then
	cd $HOME_DIR
	/usr/local/bin/cfssl gencert -initca $HOME_DIR/conf/ca-csr.json | cfssljson -bare ca
	mv ca.csr ca-key.pem ca.pem $SSL_DIR/
fi


## create admin_ssl for master ##
if [ ! -f $SSL_DIR/admssl/admin-key.pem ];then
	cd $HOME_DIR
	/usr/local/bin/cfssl gencert -ca=$SSL_DIR/ca.pem -ca-key=$SSL_DIR/ca-key.pem -config=$HOME_DIR/conf/ca-config.json -profile=kubernetes $HOME_DIR/conf/admin-csr.json | cfssljson -bare admin
	mv admin.csr admin-key.pem admin.pem $SSL_DIR/admssl/
fi
## create kubeconfig for node ##
if [ ! -f $SSL_DIR/kubectl.kubeconfig ];then
	/usr/local/bin/kubectl config set-cluster kubernetes --certificate-authority=$SSL_DIR/ca.pem --embed-certs=true --server=${KUBE_APISERVER} --kubeconfig=kubectl.kubeconfig
	/usr/local/bin/kubectl config set-credentials admin --client-certificate=$SSL_DIR/admssl/admin.pem --client-key=$SSL_DIR/admssl/admin-key.pem --embed-certs=true --kubeconfig=kubectl.kubeconfig
	/usr/local/bin/kubectl config set-context kubernetes --cluster=kubernetes --user=admin --kubeconfig=kubectl.kubeconfig
	/usr/local/bin/kubectl config use-context kubernetes --kubeconfig=kubectl.kubeconfig
	mv $HOME_DIR/kubectl.kubeconfig $SSL_DIR/
fi

## create etcd ssl for master ##
if [ ! -f $SSL_DIR/etcdssl/etcd-key.pem ];then
	cd $HOME_DIR
	/usr/local/bin/cfssl gencert -ca=$SSL_DIR/ca.pem -ca-key=$SSL_DIR/ca-key.pem -config=$HOME_DIR/conf/ca-config.json -profile=kubernetes $HOME_DIR/conf/etcd-csr.json | cfssljson -bare etcd
	mv etcd.csr etcd-key.pem etcd.pem $SSL_DIR/etcdssl/
fi

## create calico ssl for all ##
if [ ! -f $SSL_DIR/calicossl/calico-key.pem ];then
	cd $HOME_DIR
	/usr/local/bin/cfssl gencert -ca=$SSL_DIR/ca.pem -ca-key=$SSL_DIR/ca-key.pem -config=$HOME_DIR/conf/ca-config.json -profile=kubernetes $HOME_DIR/conf/calico-csr.json | cfssljson -bare calico
	mv calico.csr calico-key.pem calico.pem $SSL_DIR/calicossl/
fi

## create kubernetes ssl for master ##
if [ ! -f $SSL_DIR/k8sssl/kubernetes-key.pem ];then
	cd $HOME_DIR
	/usr/local/bin/cfssl gencert -ca=$SSL_DIR/ca.pem -ca-key=$SSL_DIR/ca-key.pem -config=$HOME_DIR/conf/ca-config.json -profile=kubernetes $HOME_DIR/conf/kubernetes-csr.json | cfssljson -bare kubernetes
	mv kubernetes.csr kubernetes-key.pem kubernetes.pem $SSL_DIR/k8sssl/
fi

## create metrics-server ssl for master ##
if [ ! -f $SSL_DIR/metricsserverssl/metrics-server-key.pem ];then
	cd $HOME_DIR
	/usr/local/bin/cfssl gencert -ca=$SSL_DIR/ca.pem -ca-key=$SSL_DIR/ca-key.pem -config=$HOME_DIR/conf/ca-config.json -profile=kubernetes $HOME_DIR/conf/metrics-server-csr.json | cfssljson -bare metrics-server
	mv metrics-server.csr metrics-server-key.pem metrics-server.pem $SSL_DIR/metricsserverssl/ 
fi

## create kube-controller-manager ssl for master ##
if [ ! -f $SSL_DIR/kcmssl/kube-controller-manager-key.pem ];then
	cd $HOME_DIR
	/usr/local/bin/cfssl gencert -ca=$SSL_DIR/ca.pem -ca-key=$SSL_DIR/ca-key.pem -config=$HOME_DIR/conf/ca-config.json -profile=kubernetes $HOME_DIR/conf/kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager
	mv kube-controller-manager.csr kube-controller-manager-key.pem kube-controller-manager.pem $SSL_DIR/kcmssl/
fi
## create kube-controller-manager.kubeconfig for master ##
if [ ! -f $SSL_DIR/kube-controller-manager.kubeconfig ];then
	/usr/local/bin/kubectl config set-cluster kubernetes --certificate-authority=$SSL_DIR/ca.pem --embed-certs=true --server=${KUBE_APISERVER} --kubeconfig=kube-controller-manager.kubeconfig
	/usr/local/bin/kubectl config set-credentials system:kube-controller-manager --client-certificate=$SSL_DIR/kcmssl/kube-controller-manager.pem --client-key=$SSL_DIR/kcmssl/kube-controller-manager-key.pem --embed-certs=true --kubeconfig=kube-controller-manager.kubeconfig
	/usr/local/bin/kubectl config set-context system:kube-controller-manager --cluster=kubernetes --user=system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig
	/usr/local/bin/kubectl config use-context system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig
	mv $HOME_DIR/kube-controller-manager.kubeconfig $SSL_DIR/
fi


## create kube-scheduler ssl for master ##
if [ ! -f $SSL_DIR/kshssl/kube-scheduler-key.pem ];then
	cd $HOME_DIR
	/usr/local/bin/cfssl gencert -ca=$SSL_DIR/ca.pem -ca-key=$SSL_DIR/ca-key.pem -config=$HOME_DIR/conf/ca-config.json -profile=kubernetes $HOME_DIR/conf/kube-scheduler-csr.json | cfssljson -bare kube-scheduler
	mv kube-scheduler.csr kube-scheduler-key.pem kube-scheduler.pem $SSL_DIR/kshssl/
fi
## create kube-scheduler.kubeconfig for master ##
if [ ! -f $SSL_DIR/kube-scheduler.kubeconfig ];then
	/usr/local/bin/kubectl config set-cluster kubernetes --certificate-authority=$SSL_DIR/ca.pem --embed-certs=true --server=${KUBE_APISERVER} --kubeconfig=kube-scheduler.kubeconfig
	/usr/local/bin/kubectl config set-credentials system:kube-scheduler --client-certificate=$SSL_DIR/kshssl/kube-scheduler.pem --client-key=$SSL_DIR/kshssl/kube-scheduler-key.pem --embed-certs=true --kubeconfig=kube-scheduler.kubeconfig
	/usr/local/bin/kubectl config set-context system:kube-scheduler --cluster=kubernetes --user=system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig
	/usr/local/bin/kubectl config use-context system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig
	mv $HOME_DIR/kube-scheduler.kubeconfig $SSL_DIR/
fi


## create kube-proxy for node ##
if [ ! -f $SSL_DIR/kubeproxyssl/kube-proxy-key.pem ];then
	cd $HOME_DIR
	/usr/local/bin/cfssl gencert -ca=$SSL_DIR/ca.pem -ca-key=$SSL_DIR/ca-key.pem -config=$HOME_DIR/conf/ca-config.json -profile=kubernetes $HOME_DIR/conf/kube-proxy-csr.json | cfssljson -bare kube-proxy
	mv kube-proxy.csr  kube-proxy-key.pem  kube-proxy.pem $SSL_DIR/kubeproxyssl/ 
fi
## create kube-proxy.kubeconfig for node ##
if [ ! -f $SSL_DIR/kube-proxy.kubeconfig ];then
	/usr/local/bin/kubectl config set-cluster kubernetes --certificate-authority=$SSL_DIR/ca.pem --embed-certs=true --server=${KUBE_APISERVER} --kubeconfig=kube-proxy.kubeconfig
	/usr/local/bin/kubectl config set-credentials kube-proxy --client-certificate=$SSL_DIR/kubeproxyssl/kube-proxy.pem --client-key=$SSL_DIR/kubeproxyssl/kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig
	/usr/local/bin/kubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig
	/usr/local/bin/kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
	mv $HOME_DIR/kube-proxy.kubeconfig $SSL_DIR/
