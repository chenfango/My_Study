基本操作语法大全：http://www.runoob.com/mysql/mysql-group-by-statement.html

创建数据库：
CREATE DATABASE 数据库名;

创建用户

MySQL表的基本操作
1、	创建表
CREATE TABLE 表的名字
(
列名a 数据类型(数据长度),
列名b 数据类型(数据长度)，
列名c 数据类型(数据长度)
);

注意数据类型时候i：CHAR 类型的一个变体是 VARCHAR 类型。它是一种可变长度的字符串类型，并且也必须带有一个范围在 0-255 之间的指示器。
e.g
create table verify_log( 
job varchar(255), 
nodeNum int, 
result tinytext, 
build_time float, 
start_time timestamp, 
buildlist longtext, 
slave tinytext, 
biuld_type varchar(255), 
primary key (job,nodeNum,start_time)
);

2、	删除表
DROP TABLE table_name;

3、	查询字段及类型
mysql> desc shqueue;
 
4、	显示表
显示整个表
select * from tablename;
显示某几列
select <列名> from tablename;
显示某几行,如显示前5行
select * from <tablename> limit 5;
显示第5到第15行
select * from <tablename> limit 5,10;
显示字段的属性
show full columns from <tablename>;
Mysql中的数据类型介绍：http://www.runoob.com/mysql/mysql-data-types.html
5、	插入一条记录
INSERT INTO 表的名字(列名a,列名b,列名c) VALUES(值1,值2,值3);
6、	删除一条记录
DELETE FROM <table_name>WHERE condition; ##可选，如果不带where表示删除整个表
e.g
mysql> delete from shqueue where JobInqueue = '3';
mysql>delete from jen where `start_time` < '2018-05-27 23:59:59';

链接：https://blog.csdn.net/hanxuemin12345/article/details/7818662

删除所有数据，但是保留表 Truncate：用于删除表内的数据（注：仅删除表内的数据，不删除表本身，相当于Delete语句不写Where子句一样）
Truncate Table  表名称
7、	更改表名
ALTER  TABLE table_name RENAME TO new_table_name

Example:
mysql> ALTER  TABLE shqueue RENAME TO queue_sh;
Query OK, 0 rows affected (0.00 sec)

mysql> show tables;
+----------------+
| Tables_in_mydb |
+----------------+
| queue_sh       |
+----------------+
8、	增加、删除、变更字段
增加一个字段
//增加一个字段，默认为空
alter table <user> add <COLUMN> VARCHAR(20) DEFAULT NULL;
//增加一个字段，默认不能为空
alter table user add <COLUMN> VARCHAR(20) NOT NULL;
某列后面增加一个字段
ALTER TABLE table_name ADD [COLUMN] col_name column_definition  [ FIRST | AFTER col_name]
//删除一个字段
alter table user DROP COLUMN new2;
修改一个字段
//修改一个字段的类型
alter table user MODIFY new1 VARCHAR(10); 
//修改一个字段的名称，此时一定要重新指定该字段的类型
alter table user CHANGE new1 new4 int;

9、修改值：
Update 语句
Update 语句用于修改表中的数据。
语法：
UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值

10、复制表

复制整个表的结构和数据，其中primary key不是表的结构需要重新添加
create table <new table> select * from <new table>;
e.gcreate table jen2 select * from jen;

只复制表结构
CREATE TABLE 新表 SELECT * FROM 旧表 WHERE 1=2；

复制旧表数据到新表（两表结构不一样）
INSERT INTO 新表(字段1,字段2,…….) SELECT 字段1,字段2,…… FROM 旧表

mysql> desc jen2;
+------------+--------------+------+-----+-------------------+-----------------------------+
| Field      | Type         | Null | Key | Default           | Extra                       |
+------------+--------------+------+-----+-------------------+-----------------------------+
| job        | varchar(255) | NO   |     | NULL              |                             |
| nodeNum    | int(11)      | NO   |     | NULL              |                             |
| Result     | tinytext     | YES  |     | NULL              |                             |
| build_time | float        | YES  |     | NULL              |                             |
| start_time | timestamp    | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |
| buildlist  | longtext     | YES  |     | NULL              |                             |
| slave      | tinytext     | YES  |     | NULL              |                             |
+------------+--------------+------+-----+-------------------+-----------------------------+
7 rows in set (0.00 sec)

mysql> desc jen;
+------------+--------------+------+-----+-------------------+-----------------------------+
| Field      | Type         | Null | Key | Default           | Extra                       |
+------------+--------------+------+-----+-------------------+-----------------------------+
| job        | varchar(255) | NO   | PRI | NULL              |                             |
| nodeNum    | int(11)      | NO   | PRI | NULL              |                             |
| Result     | tinytext     | YES  |     | NULL              |                             |
| build_time | float        | YES  |     | NULL              |                             |
| start_time | timestamp    | NO   | PRI | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |
| buildlist  | longtext     | YES  |     | NULL              |                             |
| slave      | tinytext     | YES  |     | NULL              |                             |
+------------+--------------+------+-----+-------------------+-----------------------------+
7 rows in set (0.00 sec)

11、排序

ORDER BY field1, [field2...] [ASC [DESC]]
你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。
你可以设定多个字段来排序。
你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。
你可以添加 WHERE...LIKE 子句来设置条件。

12、去重
select distinct 操作语句 from 表名;

单独添加唯一键
alter table tableName add unique key(columnName)；
删除唯一键
alter table tableName drop index columnName;
